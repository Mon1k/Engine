Texture2D shaderTexture : register(t0);
Texture2D detailTexture : register(t1);
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float lightIntensity;
    float lightDetailIntensity;
    float distanceIntensity;
};


struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float4 depthPosition : TEXCOORD1;
};

float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float depthValue;
    float detailBrightness;
    float4 detailColor;
    float3 lightDir;
    float intensity;
    float4 color;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex.xy);

    // Get the depth value of the pixel by dividing the Z pixel depth by the homogeneous W coordinate.
    depthValue = input.depthPosition.z / input.depthPosition.w;

    // Check if the depth value is close to the screen, if so we will apply the detail texture.
    if (depthValue < distanceIntensity) {
        // Sample the pixel color from the detail map texture using the sampler at this texture coordinate location.
        detailColor = detailTexture.Sample(SampleType, input.tex.zw);

        // Set the brightness of the detail texture.
        detailBrightness = lightDetailIntensity;

        // Combine the ground texture and the detail texture.  Also multiply in the detail brightness.
        textureColor = textureColor * detailColor * detailBrightness;
    }

    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    intensity = saturate(dot(input.normal, lightDir));

    if (intensity > 0.0f) {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * intensity * lightIntensity);
    }

    // Saturate the final light color.
    color = saturate(color);

    // Multiply the texture pixel and the final light color to get the result.
    color = color * textureColor;

    return color;
}