#define NUM_LIGHTS 4

Texture2D shaderTexture;
SamplerState SampleType;

struct PointLight
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float m_lightIntencity;
    float specularPower;
    float4 specularColor;
};

cbuffer LightBuffer
{
    PointLight light[NUM_LIGHTS];
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
    float3 lightPosition[NUM_LIGHTS] : TEXCOORD2;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir[NUM_LIGHTS];
    float lightIntensity[NUM_LIGHTS];
    float4 color;
    float3 reflection;
    float4 specular;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

    // Set the default output color to the ambient light value for all pixels.
    color = 0;

    // Initialize the specular color.
    specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // Calculate the amount of light on this pixel.
    for (int i = 0; i < NUM_LIGHTS; i++) {
        if (light[i].lightDirection.z != 0.0f) {
            // Invert the light direction for calculations.
            lightDir[i] = -light[i].lightDirection;

            lightIntensity[i] = saturate(dot(input.normal, lightDir[i]));
            color = light[i].ambientColor;
        } else {
            lightIntensity[i] = saturate(dot(input.normal, input.lightPosition[i]));
        }
    }

    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
    for (int i = 0; i < NUM_LIGHTS; i++) {
        color += (light[i].diffuseColor * lightIntensity[i] * light[i].m_lightIntencity);

        // Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        if (light[i].specularPower > 0.0f) {
            // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
            reflection = normalize(2 * lightIntensity[i] * input.normal - lightDir[i]);

            specular += pow(saturate(dot(reflection, input.viewDirection)), light[i].specularPower);
        }
    }


    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = saturate(color) * textureColor;

    // Add the specular component last to the output color.
    if (specular.x > 0.0f) {
        color = saturate(color + specular);
    }

    return color;
}