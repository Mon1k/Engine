Texture2D shaderTexture : register(t0);
Texture2D depthMapTexture : register(t1);

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap : register(s1);
SamplerComparisonState SamplePointCmp : register(s2);

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float lightIntensity;
    float isSoftShadow;
    float isDirection;
    float2 padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float4 lightViewPosition : TEXCOORD1;
    float3 lightPos : TEXCOORD2;
};

float4 shadow2DProj(Texture2D samp, float4 s)
{
    return samp.SampleCmp(SamplePointCmp, s.xy / s.w, s.z / s.w);
}

float lookup(float2 offSet, float4 ShadowCoord)
{
    float xPixelOffset = 1 / 1024;
    float yPixelOffset = 1 / 1024;
    
    return shadow2DProj(depthMapTexture, ShadowCoord + float4(offSet.x * xPixelOffset * ShadowCoord.w, offSet.y * yPixelOffset * ShadowCoord.w, 0.05, 0.0)).w;
}

float2 texOffset(int u, int v)
{
    float shadowMapSize = 2048.0f;
    return float2(u * 1.0f / shadowMapSize, v * 1.0f / shadowMapSize);
}

float4 ShadowPixelShader(PixelInputType input) : SV_TARGET
{
    float bias;
    float4 color;
    float2 projectTexCoord;
    float depthValue;
    float lightDepthValue;
    float intensity;
    float4 textureColor;
    float shadow;
    
    int gradientShadowSize = 7;
    float gradientShadowSizeLimit = gradientShadowSize / 2;
    int gradientShadowSizeDelimiter = (gradientShadowSize + 1) * 4;

    bias = 0.000001f;
    color = ambientColor;

    projectTexCoord.x = input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
    projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;
    
    if (isDirection) {
        intensity = saturate(dot(input.normal, -lightDirection));
    } else {
        intensity = saturate(dot(input.normal, input.lightPos));
    }

    // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
    if ((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y)) {
        // Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
        depthValue = 1.0f - depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

        // Calculate the depth of the light.
        lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;
        lightDepthValue -= bias;
        
        // inside light frustum
        // Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
        // If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
        if (lightDepthValue < depthValue) {
            if (intensity > 0.0f) {
                // object with shadow but not shadow
                // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
                color += (diffuseColor * intensity * lightIntensity);
                color = saturate(color);
            }
            
        } else {
            // frustum view light
            // outside shadow but in view frustum light as normal light
            if (depthValue == 0.0f) {
                color += (diffuseColor * intensity * lightIntensity);
                color = saturate(color);
                
            // shadow
            } else {
                shadow = 0;
                float x, y;
                for (y = -gradientShadowSizeLimit; y <= gradientShadowSizeLimit; y += 1.0) {
                    for (x = -gradientShadowSizeLimit; x <= gradientShadowSizeLimit; x += 1.0) {
                        shadow += depthMapTexture.SampleCmpLevelZero(SamplePointCmp, projectTexCoord.xy + texOffset(x, y), lightDepthValue);
                    }
                }
                shadow /= gradientShadowSizeDelimiter;
                
                color += shadow;
                color = saturate(color);
                //color = float4(1.0f, 0.0f, 0.0f, 1.0f);
            }
        }
        
    // outside frustum light view
    } else {
        if (intensity > 0.0f) {
            color += (diffuseColor * intensity * lightIntensity);
            color = saturate(color);
        }
    }

    textureColor = shaderTexture.Sample(SampleTypeWrap, input.tex);
    color = color * textureColor;

    return color;
}

float4 ShadowPixelShader2(PixelInputType input) : SV_TARGET
{
    float bias;
    float4 color;
    float2 projectTexCoord;
    float depthValue;
    float lightDepthValue;
    float intensity;
    float4 textureColor;

    // Set the bias value for fixing the floating point precision issues.
    bias = 0.000001f;

    // Set the default output color to the ambient light value for all pixels.
    color = float4(0.0f, 0.0f, 0.0f, 1.0f);
    if (!isSoftShadow) {
        color = ambientColor;
    }
    
    // Calculate the projected texture coordinates.
    projectTexCoord.x = input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
    projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;

     // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
    if ((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y)) {
        // Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
        depthValue = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

        // Calculate the depth of the light.
        lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;
        lightDepthValue = lightDepthValue - bias;
        
        // Calculate the amount of light on this pixel.
        if (isDirection) {
            intensity = saturate(dot(input.normal, -lightDirection));
        } else {
            intensity = saturate(dot(input.normal, input.lightPos));
        }
        
        /*float x, y;
        float shadow;
        for (y = -3.5; y <= 3.5; y += 1.0) {
            for (x = -3.5; x <= 3.5; x += 1.0) {
                shadow += lookup(float2(x, y), input.lightViewPosition);
            }
        }
        shadow /= 64.0;*/
        //depthMapTexture.SampleCmpLevelZero(SamplePointCmp, input.lightViewPosition.xy, input.lightViewPosition.z);
        

        // Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
        // If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
        if (lightDepthValue < depthValue) {
            if (intensity > 0.0f) {
                if (isSoftShadow) {
                    color = float4(1.0f, 1.0f, 1.0f, 1.0f);
                } else {
                    // object with shadow but not shadow
                    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
                    color += (diffuseColor * intensity * lightIntensity);
                    color = saturate(color);
                    
                }
            } else {
                return color;
            }
        } else {
            // frustum view light
            // outside view frustum light as normal light
            if (depthValue == 0.0f) {
                color += (diffuseColor * intensity * lightIntensity);
                color = saturate(color);
                
            // shadow
            } else {
                //color = float4(1.0f, 0.0f, 0.0f, 1.0f);
            }
        }
        
    // outside frustum light view
    } else {
        // If this is outside the area of shadow map range then draw things normally with regular lighting.
        intensity = saturate(dot(input.normal, -lightDirection));
        if (intensity > 0.0f) {
            color += (diffuseColor * intensity * lightIntensity);
            color = saturate(color);
        }
    }


    if (!isSoftShadow) {
        // Sample the pixel color from the texture using the sampler at this texture coordinate location.
        textureColor = shaderTexture.Sample(SampleTypeWrap, input.tex);

        // Combine the light and texture color.
        color = color * textureColor;
    }

    return color;
}