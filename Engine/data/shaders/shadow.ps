Texture2D shaderTexture : register(t0);
Texture2D depthMapTexture : register(t1);

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap  : register(s1);

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float lightIntensity;
    float isSoftShadow;
    float isDirection;
    float2 padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float4 lightViewPosition : TEXCOORD1;
    float3 lightPos : TEXCOORD2;
};

float4 ShadowPixelShader(PixelInputType input) : SV_TARGET
{
    float bias;
    float4 color;
    float2 projectTexCoord;
    float depthValue;
    float lightDepthValue;
    float intensity;
    float4 textureColor;

    // Set the bias value for fixing the floating point precision issues.
    bias = 0.00001f;

    // Set the default output color to the ambient light value for all pixels.
    color = float4(0.0f, 0.0f, 0.0f, 1.0f);
    if (!isSoftShadow) {
        color = ambientColor;
    }
    
    // Calculate the projected texture coordinates.
    projectTexCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
    projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;

     // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
    if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
    {
        // Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
        depthValue = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

        // Calculate the depth of the light.
        lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

        // Subtract the bias from the lightDepthValue.
        lightDepthValue = lightDepthValue - bias;

        // Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
        // If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
        if(lightDepthValue < depthValue)
        {
            // Calculate the amount of light on this pixel.
            if (isDirection) {
                intensity = saturate(dot(input.normal, -lightDirection));
            } else {
                intensity = saturate(dot(input.normal, input.lightPos));
            }

            if(intensity > 0.0f)
            {
                if (isSoftShadow) {
                    color = float4(1.0f, 1.0f, 1.0f, 1.0f);
                } else {
                    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
                    color += (diffuseColor * intensity * lightIntensity);

                    // Saturate the final light color.
                    color = saturate(color);
                }
            }
        }
    } else {
        // If this is outside the area of shadow map range then draw things normally with regular lighting.
        intensity = saturate(dot(input.normal, -lightDirection));
        if (intensity > 0.0f)
        {
            color += (diffuseColor * intensity * lightIntensity);
            color = saturate(color);
        }
    }


    if (!isSoftShadow) {
        // Sample the pixel color from the texture using the sampler at this texture coordinate location.
        textureColor = shaderTexture.Sample(SampleTypeWrap, input.tex);

        // Combine the light and texture color.
        color = color * textureColor;
    }

    return color;
}